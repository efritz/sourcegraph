// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package database

import (
	types "github.com/sourcegraph/sourcegraph/internal/codeintel/bundles/types"
	"sync"
)

// MockIDatabase is a mock impelementation of the IDatabase interface (from
// the package
// github.com/sourcegraph/sourcegraph/cmd/precise-code-intel-bundle-manager/internal/database)
// used for unit testing.
type MockIDatabase struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *IDatabaseCloseFunc
	// DefinitionsFunc is an instance of a mock function object controlling
	// the behavior of the method Definitions.
	DefinitionsFunc *IDatabaseDefinitionsFunc
	// ExistsFunc is an instance of a mock function object controlling the
	// behavior of the method Exists.
	ExistsFunc *IDatabaseExistsFunc
	// HoverFunc is an instance of a mock function object controlling the
	// behavior of the method Hover.
	HoverFunc *IDatabaseHoverFunc
	// MonikerResultsFunc is an instance of a mock function object
	// controlling the behavior of the method MonikerResults.
	MonikerResultsFunc *IDatabaseMonikerResultsFunc
	// MonikersByPositionFunc is an instance of a mock function object
	// controlling the behavior of the method MonikersByPosition.
	MonikersByPositionFunc *IDatabaseMonikersByPositionFunc
	// PackageInformationFunc is an instance of a mock function object
	// controlling the behavior of the method PackageInformation.
	PackageInformationFunc *IDatabasePackageInformationFunc
	// ReferencesFunc is an instance of a mock function object controlling
	// the behavior of the method References.
	ReferencesFunc *IDatabaseReferencesFunc
}

// NewMockIDatabase creates a new mock of the IDatabase interface. All
// methods return zero values for all results, unless overwritten.
func NewMockIDatabase() *MockIDatabase {
	return &MockIDatabase{
		CloseFunc: &IDatabaseCloseFunc{
			defaultHook: func() error {
				return nil
			},
		},
		DefinitionsFunc: &IDatabaseDefinitionsFunc{
			defaultHook: func(string, int, int) ([]Location, error) {
				return nil, nil
			},
		},
		ExistsFunc: &IDatabaseExistsFunc{
			defaultHook: func(string) (bool, error) {
				return false, nil
			},
		},
		HoverFunc: &IDatabaseHoverFunc{
			defaultHook: func(string, int, int) (string, Range, bool, error) {
				return "", Range{}, false, nil
			},
		},
		MonikerResultsFunc: &IDatabaseMonikerResultsFunc{
			defaultHook: func(string, string, string, int, int) ([]Location, int, error) {
				return nil, 0, nil
			},
		},
		MonikersByPositionFunc: &IDatabaseMonikersByPositionFunc{
			defaultHook: func(string, int, int) ([][]types.MonikerData, error) {
				return nil, nil
			},
		},
		PackageInformationFunc: &IDatabasePackageInformationFunc{
			defaultHook: func(string, types.ID) (types.PackageInformationData, bool, error) {
				return types.PackageInformationData{}, false, nil
			},
		},
		ReferencesFunc: &IDatabaseReferencesFunc{
			defaultHook: func(string, int, int) ([]Location, error) {
				return nil, nil
			},
		},
	}
}

// NewMockIDatabaseFrom creates a new mock of the MockIDatabase interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockIDatabaseFrom(i IDatabase) *MockIDatabase {
	return &MockIDatabase{
		CloseFunc: &IDatabaseCloseFunc{
			defaultHook: i.Close,
		},
		DefinitionsFunc: &IDatabaseDefinitionsFunc{
			defaultHook: i.Definitions,
		},
		ExistsFunc: &IDatabaseExistsFunc{
			defaultHook: i.Exists,
		},
		HoverFunc: &IDatabaseHoverFunc{
			defaultHook: i.Hover,
		},
		MonikerResultsFunc: &IDatabaseMonikerResultsFunc{
			defaultHook: i.MonikerResults,
		},
		MonikersByPositionFunc: &IDatabaseMonikersByPositionFunc{
			defaultHook: i.MonikersByPosition,
		},
		PackageInformationFunc: &IDatabasePackageInformationFunc{
			defaultHook: i.PackageInformation,
		},
		ReferencesFunc: &IDatabaseReferencesFunc{
			defaultHook: i.References,
		},
	}
}

// IDatabaseCloseFunc describes the behavior when the Close method of the
// parent MockIDatabase instance is invoked.
type IDatabaseCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []IDatabaseCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIDatabase) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(IDatabaseCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockIDatabase instance is invoked and the hook queue is empty.
func (f *IDatabaseCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockIDatabase instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IDatabaseCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *IDatabaseCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseCloseFunc) appendCall(r0 IDatabaseCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseCloseFuncCall objects describing
// the invocations of this function.
func (f *IDatabaseCloseFunc) History() []IDatabaseCloseFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseCloseFuncCall is an object that describes an invocation of
// method Close on an instance of MockIDatabase.
type IDatabaseCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IDatabaseDefinitionsFunc describes the behavior when the Definitions
// method of the parent MockIDatabase instance is invoked.
type IDatabaseDefinitionsFunc struct {
	defaultHook func(string, int, int) ([]Location, error)
	hooks       []func(string, int, int) ([]Location, error)
	history     []IDatabaseDefinitionsFuncCall
	mutex       sync.Mutex
}

// Definitions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIDatabase) Definitions(v0 string, v1 int, v2 int) ([]Location, error) {
	r0, r1 := m.DefinitionsFunc.nextHook()(v0, v1, v2)
	m.DefinitionsFunc.appendCall(IDatabaseDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Definitions method
// of the parent MockIDatabase instance is invoked and the hook queue is
// empty.
func (f *IDatabaseDefinitionsFunc) SetDefaultHook(hook func(string, int, int) ([]Location, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Definitions method of the parent MockIDatabase instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IDatabaseDefinitionsFunc) PushHook(hook func(string, int, int) ([]Location, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseDefinitionsFunc) SetDefaultReturn(r0 []Location, r1 error) {
	f.SetDefaultHook(func(string, int, int) ([]Location, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseDefinitionsFunc) PushReturn(r0 []Location, r1 error) {
	f.PushHook(func(string, int, int) ([]Location, error) {
		return r0, r1
	})
}

func (f *IDatabaseDefinitionsFunc) nextHook() func(string, int, int) ([]Location, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseDefinitionsFunc) appendCall(r0 IDatabaseDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseDefinitionsFuncCall objects
// describing the invocations of this function.
func (f *IDatabaseDefinitionsFunc) History() []IDatabaseDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseDefinitionsFuncCall is an object that describes an invocation of
// method Definitions on an instance of MockIDatabase.
type IDatabaseDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDatabaseExistsFunc describes the behavior when the Exists method of the
// parent MockIDatabase instance is invoked.
type IDatabaseExistsFunc struct {
	defaultHook func(string) (bool, error)
	hooks       []func(string) (bool, error)
	history     []IDatabaseExistsFuncCall
	mutex       sync.Mutex
}

// Exists delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIDatabase) Exists(v0 string) (bool, error) {
	r0, r1 := m.ExistsFunc.nextHook()(v0)
	m.ExistsFunc.appendCall(IDatabaseExistsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exists method of the
// parent MockIDatabase instance is invoked and the hook queue is empty.
func (f *IDatabaseExistsFunc) SetDefaultHook(hook func(string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exists method of the parent MockIDatabase instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IDatabaseExistsFunc) PushHook(hook func(string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(string) (bool, error) {
		return r0, r1
	})
}

func (f *IDatabaseExistsFunc) nextHook() func(string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseExistsFunc) appendCall(r0 IDatabaseExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseExistsFuncCall objects describing
// the invocations of this function.
func (f *IDatabaseExistsFunc) History() []IDatabaseExistsFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseExistsFuncCall is an object that describes an invocation of
// method Exists on an instance of MockIDatabase.
type IDatabaseExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDatabaseHoverFunc describes the behavior when the Hover method of the
// parent MockIDatabase instance is invoked.
type IDatabaseHoverFunc struct {
	defaultHook func(string, int, int) (string, Range, bool, error)
	hooks       []func(string, int, int) (string, Range, bool, error)
	history     []IDatabaseHoverFuncCall
	mutex       sync.Mutex
}

// Hover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIDatabase) Hover(v0 string, v1 int, v2 int) (string, Range, bool, error) {
	r0, r1, r2, r3 := m.HoverFunc.nextHook()(v0, v1, v2)
	m.HoverFunc.appendCall(IDatabaseHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the Hover method of the
// parent MockIDatabase instance is invoked and the hook queue is empty.
func (f *IDatabaseHoverFunc) SetDefaultHook(hook func(string, int, int) (string, Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Hover method of the parent MockIDatabase instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IDatabaseHoverFunc) PushHook(hook func(string, int, int) (string, Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseHoverFunc) SetDefaultReturn(r0 string, r1 Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(string, int, int) (string, Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseHoverFunc) PushReturn(r0 string, r1 Range, r2 bool, r3 error) {
	f.PushHook(func(string, int, int) (string, Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *IDatabaseHoverFunc) nextHook() func(string, int, int) (string, Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseHoverFunc) appendCall(r0 IDatabaseHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseHoverFuncCall objects describing
// the invocations of this function.
func (f *IDatabaseHoverFunc) History() []IDatabaseHoverFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseHoverFuncCall is an object that describes an invocation of
// method Hover on an instance of MockIDatabase.
type IDatabaseHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// IDatabaseMonikerResultsFunc describes the behavior when the
// MonikerResults method of the parent MockIDatabase instance is invoked.
type IDatabaseMonikerResultsFunc struct {
	defaultHook func(string, string, string, int, int) ([]Location, int, error)
	hooks       []func(string, string, string, int, int) ([]Location, int, error)
	history     []IDatabaseMonikerResultsFuncCall
	mutex       sync.Mutex
}

// MonikerResults delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDatabase) MonikerResults(v0 string, v1 string, v2 string, v3 int, v4 int) ([]Location, int, error) {
	r0, r1, r2 := m.MonikerResultsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.MonikerResultsFunc.appendCall(IDatabaseMonikerResultsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the MonikerResults
// method of the parent MockIDatabase instance is invoked and the hook queue
// is empty.
func (f *IDatabaseMonikerResultsFunc) SetDefaultHook(hook func(string, string, string, int, int) ([]Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MonikerResults method of the parent MockIDatabase instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IDatabaseMonikerResultsFunc) PushHook(hook func(string, string, string, int, int) ([]Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseMonikerResultsFunc) SetDefaultReturn(r0 []Location, r1 int, r2 error) {
	f.SetDefaultHook(func(string, string, string, int, int) ([]Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseMonikerResultsFunc) PushReturn(r0 []Location, r1 int, r2 error) {
	f.PushHook(func(string, string, string, int, int) ([]Location, int, error) {
		return r0, r1, r2
	})
}

func (f *IDatabaseMonikerResultsFunc) nextHook() func(string, string, string, int, int) ([]Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseMonikerResultsFunc) appendCall(r0 IDatabaseMonikerResultsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseMonikerResultsFuncCall objects
// describing the invocations of this function.
func (f *IDatabaseMonikerResultsFunc) History() []IDatabaseMonikerResultsFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseMonikerResultsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseMonikerResultsFuncCall is an object that describes an invocation
// of method MonikerResults on an instance of MockIDatabase.
type IDatabaseMonikerResultsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseMonikerResultsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseMonikerResultsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// IDatabaseMonikersByPositionFunc describes the behavior when the
// MonikersByPosition method of the parent MockIDatabase instance is
// invoked.
type IDatabaseMonikersByPositionFunc struct {
	defaultHook func(string, int, int) ([][]types.MonikerData, error)
	hooks       []func(string, int, int) ([][]types.MonikerData, error)
	history     []IDatabaseMonikersByPositionFuncCall
	mutex       sync.Mutex
}

// MonikersByPosition delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDatabase) MonikersByPosition(v0 string, v1 int, v2 int) ([][]types.MonikerData, error) {
	r0, r1 := m.MonikersByPositionFunc.nextHook()(v0, v1, v2)
	m.MonikersByPositionFunc.appendCall(IDatabaseMonikersByPositionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MonikersByPosition
// method of the parent MockIDatabase instance is invoked and the hook queue
// is empty.
func (f *IDatabaseMonikersByPositionFunc) SetDefaultHook(hook func(string, int, int) ([][]types.MonikerData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MonikersByPosition method of the parent MockIDatabase instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDatabaseMonikersByPositionFunc) PushHook(hook func(string, int, int) ([][]types.MonikerData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseMonikersByPositionFunc) SetDefaultReturn(r0 [][]types.MonikerData, r1 error) {
	f.SetDefaultHook(func(string, int, int) ([][]types.MonikerData, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseMonikersByPositionFunc) PushReturn(r0 [][]types.MonikerData, r1 error) {
	f.PushHook(func(string, int, int) ([][]types.MonikerData, error) {
		return r0, r1
	})
}

func (f *IDatabaseMonikersByPositionFunc) nextHook() func(string, int, int) ([][]types.MonikerData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseMonikersByPositionFunc) appendCall(r0 IDatabaseMonikersByPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseMonikersByPositionFuncCall objects
// describing the invocations of this function.
func (f *IDatabaseMonikersByPositionFunc) History() []IDatabaseMonikersByPositionFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseMonikersByPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseMonikersByPositionFuncCall is an object that describes an
// invocation of method MonikersByPosition on an instance of MockIDatabase.
type IDatabaseMonikersByPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][]types.MonikerData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseMonikersByPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseMonikersByPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IDatabasePackageInformationFunc describes the behavior when the
// PackageInformation method of the parent MockIDatabase instance is
// invoked.
type IDatabasePackageInformationFunc struct {
	defaultHook func(string, types.ID) (types.PackageInformationData, bool, error)
	hooks       []func(string, types.ID) (types.PackageInformationData, bool, error)
	history     []IDatabasePackageInformationFuncCall
	mutex       sync.Mutex
}

// PackageInformation delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIDatabase) PackageInformation(v0 string, v1 types.ID) (types.PackageInformationData, bool, error) {
	r0, r1, r2 := m.PackageInformationFunc.nextHook()(v0, v1)
	m.PackageInformationFunc.appendCall(IDatabasePackageInformationFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the PackageInformation
// method of the parent MockIDatabase instance is invoked and the hook queue
// is empty.
func (f *IDatabasePackageInformationFunc) SetDefaultHook(hook func(string, types.ID) (types.PackageInformationData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PackageInformation method of the parent MockIDatabase instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IDatabasePackageInformationFunc) PushHook(hook func(string, types.ID) (types.PackageInformationData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabasePackageInformationFunc) SetDefaultReturn(r0 types.PackageInformationData, r1 bool, r2 error) {
	f.SetDefaultHook(func(string, types.ID) (types.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabasePackageInformationFunc) PushReturn(r0 types.PackageInformationData, r1 bool, r2 error) {
	f.PushHook(func(string, types.ID) (types.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

func (f *IDatabasePackageInformationFunc) nextHook() func(string, types.ID) (types.PackageInformationData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabasePackageInformationFunc) appendCall(r0 IDatabasePackageInformationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabasePackageInformationFuncCall objects
// describing the invocations of this function.
func (f *IDatabasePackageInformationFunc) History() []IDatabasePackageInformationFuncCall {
	f.mutex.Lock()
	history := make([]IDatabasePackageInformationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabasePackageInformationFuncCall is an object that describes an
// invocation of method PackageInformation on an instance of MockIDatabase.
type IDatabasePackageInformationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.PackageInformationData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabasePackageInformationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabasePackageInformationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// IDatabaseReferencesFunc describes the behavior when the References method
// of the parent MockIDatabase instance is invoked.
type IDatabaseReferencesFunc struct {
	defaultHook func(string, int, int) ([]Location, error)
	hooks       []func(string, int, int) ([]Location, error)
	history     []IDatabaseReferencesFuncCall
	mutex       sync.Mutex
}

// References delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIDatabase) References(v0 string, v1 int, v2 int) ([]Location, error) {
	r0, r1 := m.ReferencesFunc.nextHook()(v0, v1, v2)
	m.ReferencesFunc.appendCall(IDatabaseReferencesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the References method of
// the parent MockIDatabase instance is invoked and the hook queue is empty.
func (f *IDatabaseReferencesFunc) SetDefaultHook(hook func(string, int, int) ([]Location, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// References method of the parent MockIDatabase instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IDatabaseReferencesFunc) PushHook(hook func(string, int, int) ([]Location, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IDatabaseReferencesFunc) SetDefaultReturn(r0 []Location, r1 error) {
	f.SetDefaultHook(func(string, int, int) ([]Location, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IDatabaseReferencesFunc) PushReturn(r0 []Location, r1 error) {
	f.PushHook(func(string, int, int) ([]Location, error) {
		return r0, r1
	})
}

func (f *IDatabaseReferencesFunc) nextHook() func(string, int, int) ([]Location, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IDatabaseReferencesFunc) appendCall(r0 IDatabaseReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IDatabaseReferencesFuncCall objects
// describing the invocations of this function.
func (f *IDatabaseReferencesFunc) History() []IDatabaseReferencesFuncCall {
	f.mutex.Lock()
	history := make([]IDatabaseReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IDatabaseReferencesFuncCall is an object that describes an invocation of
// method References on an instance of MockIDatabase.
type IDatabaseReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IDatabaseReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IDatabaseReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
